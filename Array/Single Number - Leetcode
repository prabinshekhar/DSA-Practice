//Time complexity - O(n^2) 

public int singleNumber(int[] nums) {
        int res=0;
        for(int i=0;i<nums.length;i++)
        {
           int n=nums[i];
           int count=0;
           for(int j=0;j<nums.length;j++)
           {
             if(n==nums[j])
             count++;
           }
           if(count==1)
           {
            res=n;
            break;
           }
        }
        return res;
    }
}


// Using hashmap - 0(n) , 0(n)
public int singleNumber(int[] nums) {
  HashMap<Integer,Integer> map = new HashMap<>();
        for(int num: nums)
        {
            map.put(num,map.getOrDefault(num,0)+1);
        }

        for(int key:map.keySet())
        {
            if(map.get(key)==1)
            {
                return key;
            }
        }
        return -1;
    }


//Using XOR  ( time complexity - 0(n) ,space complexity - O(1))
XOR Has properties -
a ^ a = 0 ( a number XORed with itself is 0)
a ^ 0 = a ( a number XORed with 0 remains unchanged ) 

- Duplicate numbers cancel each other , leaving only the single number.
4 ^ 1 ^ 2 ^ 1 ^ 2 = 4
 public int singleNumber(int[] nums) {
        int res=0;
        //XOR all numbers
        for(int num : nums)
        {
            res ^=num;
        }
        return res;
    }
