import java.util.*;

class Main
{
  public static void main(String[] args)
  {
    BinaryTree tree = new BinaryTree();
    tree.insert(50);
    tree.insert(30);
    tree.insert(70);
    tree.insert(20);
    tree.insert(40);
    tree.insert(60);
    tree.insert(80);
    
    System.out.print("In-order Traversal:");
    tree.inOrderRec(tree.root);
    System.out.println();
    
    System.out.print("Pre-order Traversal:");
    tree.preOrderRec(tree.root);
    System.out.println();
    
    System.out.print("Post-order Traversal:");
    tree.postOrderRec(tree.root);
  }
  
}

public class TreeNode{
  int value;
  TreeNode left;
  TreeNode right;
  
  TreeNode(int value)
  {
    this.value=value;
    left=right=null;
  }
}

public class BinaryTree {
  TreeNode root;
  
  BinaryTree(){
    root = null;
  }
  
  public void insert(int value)
  {
    if(root==null)
    {
      root=new TreeNode(value);
      return;
    }
    
    TreeNode current = root;
    TreeNode parent = null;
    
    while(current!=null)
    {
      parent=current;
      if(value < current.value)
      {
        current=current.left;
      }
      else if(value > current.value)
      {
        current= current.right;
      }
      else{
        return;
      }
    }
    
    if(value<parent.value)
    {
      parent.left = new TreeNode(value);
    }
    else
    {
      parent.right= new TreeNode(value);
    }
  }
  
  
  public void inOrderRec(TreeNode node)
  {
    if(node!=null)
    {
      inOrderRec(node.left);
      System.out.print(node.value+" ");
      inOrderRec(node.right);
    }
   
  }
  
  public void preOrderRec(TreeNode root)
  {
    if(root!=null)
    {
      System.out.print(root.value+ " ");
      preOrderRec(root.left);
      preOrderRec(root.right);
    }
  
  }
  
  public void postOrderRec(TreeNode root)
  {
    if(root!=null)
    {
      postOrderRec(root.left);
      postOrderRec(root.right);
      System.out.print(root.value+ " ");
    }
  }
}
