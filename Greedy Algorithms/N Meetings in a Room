You are given timings of n meetings in the form of (start[i], end[i]) where start[i] is the start time of meeting i and end[i] is the finish time of meeting i. Return the maximum number of meetings that can be accommodated in a single meeting room, when only one meeting can be held in the meeting room at a particular time. 

Note: The start time of one chosen meeting can't be equal to the end time of the other chosen meeting.

Examples :

Input: start[] = [1, 3, 0, 5, 8, 5], end[] =  [2, 4, 6, 7, 9, 9]
Output: 4
Explanation: Maximum four meetings can be held with given start and end timings. The meetings are - (1, 2), (3, 4), (5,7) and (8,9)
( https://www.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1 )

class Solution {
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    public int maxMeetings(int start[], int end[]) {
  
        // add your code here
      //STEP 1 : pair start and end into a 2D array
      int[][] pairs = new int[start.length][2];
      for(int i=0;i<start.length;i++)
      {
        pairs[i][0]=end[i];
        pairs[i][1]=start[i];
      }
      
      
      //STEP 2: Sort pairs by end time
      Arrays.sort(pairs,(a,b)->Integer.compare(a[0],b[0]));
      
      
      //Select meetings on their end times
      int prev=-1,count=0;
      for(int i=0;i<start.length;i++)
      {
        if(pairs[i][1]>prev)
        {
         count++;
         prev = pairs[i][0];
        }
      }
     return count;
    }
}
